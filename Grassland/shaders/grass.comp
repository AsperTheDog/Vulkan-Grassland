#version 450
layout(local_size_x = 256) in;

layout(binding = 0) uniform sampler2D heightmap;
layout(binding = 1) uniform sampler2D grassHeightNoise;

struct GrassInstance {
    vec3 position;
    float rotation;
    vec2 uv;
    float height;
};

struct TileInstance
{
    uint globalTileIndex;
    uint tileIndex;
};

layout(binding = 2) buffer TileBuffer {
    uvec4 instanceOffsets;
    uvec4 tileOffsets;
    TileInstance tileIndexes[];
};

layout(binding = 3) buffer GrassBuffer {
    GrassInstance grassPositions[];
};

layout(push_constant) uniform PushConstants {
    vec2 centerPos;
    vec2 worldOffset;
    uvec4 tileGridSizes;
    uvec4 tileDensities;
    float tileSize;
    float gridExtent;
    float heightmapScale;
    float grassBaseHeight;
    float grassHeightVariation;
} pushConstants;

struct TileData {
    vec2 offset;
    uint density;
    uint bladeOffset;
};

float random(float seed)
{
    seed = fract(seed * 0.1031);
    seed *= seed + 33.33;
    seed *= seed + seed;
    return fract(seed);
}

TileData getTileData()
{
    uint globalIndex = gl_GlobalInvocationID.x;

    uint densities[4] = {pushConstants.tileDensities.x, pushConstants.tileDensities.y, pushConstants.tileDensities.z, pushConstants.tileDensities.w};

    uint ringIndex = int(globalIndex >= instanceOffsets[1]) + int(globalIndex >= instanceOffsets[2]) + int(globalIndex >= instanceOffsets[3]);
    uint density = densities[ringIndex] * densities[ringIndex];
    uint localInstanceIndex = globalIndex - instanceOffsets[ringIndex];
    uint computeTileIndex = (localInstanceIndex / density) + tileOffsets[ringIndex];
    uint localTileIndex = tileIndexes[computeTileIndex].tileIndex;
    uint globalPosIndex = tileIndexes[computeTileIndex].globalTileIndex;

    TileData data;
    data.offset = vec2(globalPosIndex % pushConstants.tileGridSizes.w, globalPosIndex / pushConstants.tileGridSizes.w) * pushConstants.tileSize;
    data.offset -= vec2(pushConstants.tileGridSizes.w * pushConstants.tileSize / 2.0);
    data.density = densities[ringIndex];
    data.bladeOffset = localInstanceIndex % density;
    return data;
}

void main()
{
    uint globalIndex = gl_GlobalInvocationID.x;
    if (globalIndex >= grassPositions.length())
        return;
    
    TileData tileData = getTileData();

    uint bladesPerTile = tileData.density * tileData.density;

    ivec2 tileCoord = ivec2(tileData.bladeOffset % tileData.density, tileData.bladeOffset / tileData.density);
    
    float grassAreaSize = pushConstants.tileSize / float(tileData.density);
    vec2 globalPos = pushConstants.centerPos + tileData.offset + vec2(tileCoord) * grassAreaSize;

    vec3 pos = vec3(globalPos.x, 0.0, globalPos.y);
    pos.x += random(pos.z * 2.3411) * grassAreaSize;
    pos.z += random(pos.x * 5.2334) * grassAreaSize;
    vec2 heightmapUV = (pos.xz - pushConstants.worldOffset) / pushConstants.gridExtent;
    pos.y = -texture(heightmap, heightmapUV).r * pushConstants.heightmapScale;

    float height = texture(grassHeightNoise, heightmapUV).r * pushConstants.grassHeightVariation + pushConstants.grassBaseHeight;

    grassPositions[globalIndex].position = pos;
    grassPositions[globalIndex].rotation = random(pos.x + pos.z) * 2.0 * 3.14159265359;
    grassPositions[globalIndex].height = height;
    grassPositions[globalIndex].uv = heightmapUV;
}